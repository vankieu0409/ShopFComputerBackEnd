// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ShopFComputerBackEnd.Notification.Data;
using ShopFComputerBackEnd.Notification.Domain.Enums;
using ShopFComputerBackEnd.Notification.Domain.ValueObjects;

#nullable disable

namespace ShopFComputerBackEnd.Notification.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "notification_status", new[] { "fail", "success" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "notification_type", new[] { "sms", "email", "mobile" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ShopFComputerBackEnd.Notification.Domain.ReadModels.DeviceReadModel", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Devicetoken")
                        .HasColumnType("text");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "Devicetoken", "ProfileId");

                    b.HasIndex("ProfileId");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("ProfileId"), new[] { "Devicetoken", "UserId" });

                    b.HasIndex("UserId");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("UserId"), new[] { "Devicetoken", "ProfileId" });

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("ShopFComputerBackEnd.Notification.Domain.ReadModels.HistoryReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<string>("Action")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ActionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ConfigurationType")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("Destination")
                        .HasColumnType("text");

                    b.Property<string>("GenealogyName")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<NotificationBuiltValueObject>("RawData")
                        .HasColumnType("jsonb");

                    b.Property<DateTimeOffset>("SentTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<NotificationStatus>("Status")
                        .HasColumnType("notification_status");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uuid");

                    b.Property<NotificationType>("Type")
                        .HasColumnType("notification_type");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("ShopFComputerBackEnd.Notification.Domain.ReadModels.NotificationReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<string>("ConcurrencyTimestamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Context")
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DeletedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("ModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<NotificationType>("Type")
                        .HasColumnType("notification_type");

                    b.Property<ICollection<NotificationVariableValueObject>>("Variables")
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("Context");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("Context"), new[] { "Id", "Name", "Type", "Variables" });

                    b.HasIndex("Id")
                        .IsUnique();

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("Id"), new[] { "Context", "Name", "Type" });

                    b.HasIndex("Context", "Name");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("Context", "Name"), new[] { "Id", "Type", "Variables" });

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ShopFComputerBackEnd.Notification.Domain.ReadModels.NotificationTemplateReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<IEnumerable<NotificationTemplateAttachmentValueObject>>("Attachments")
                        .HasColumnType("jsonb");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("LanguageCode")
                        .HasColumnType("text");

                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("Id"), new[] { "LanguageCode", "Subject", "Content" });

                    b.HasIndex("LanguageCode");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("LanguageCode"), new[] { "Id", "Subject", "Content" });

                    b.HasIndex("NotificationId");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("ShopFComputerBackEnd.Notification.Domain.ReadModels.HistoryReadModel", b =>
                {
                    b.HasOne("ShopFComputerBackEnd.Notification.Domain.ReadModels.NotificationTemplateReadModel", "Template")
                        .WithMany("Histories")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("ShopFComputerBackEnd.Notification.Domain.ReadModels.NotificationTemplateReadModel", b =>
                {
                    b.HasOne("ShopFComputerBackEnd.Notification.Domain.ReadModels.NotificationReadModel", "Notification")
                        .WithMany("Templates")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("ShopFComputerBackEnd.Notification.Domain.ReadModels.NotificationReadModel", b =>
                {
                    b.Navigation("Templates");
                });

            modelBuilder.Entity("ShopFComputerBackEnd.Notification.Domain.ReadModels.NotificationTemplateReadModel", b =>
                {
                    b.Navigation("Histories");
                });
#pragma warning restore 612, 618
        }
    }
}
